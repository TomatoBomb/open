# 畳み込みによる画像認識
#実行推奨環境：GoogleColaboratory

## ＜説明＞
#特段操作の説明がない限り、実行してください。

##少し時間を要する
#pyTorchのインポート
import torch
#学習済みのモデルをインポート
from torchvision import models
#データ変換のためのモジュールをインポート
from torchvision import transforms
#画像修正のモジュールをインポート
from PIL import Image
#前処理用
preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]
        )])
#101層のResNetを使用
resnet = models.resnet101(pretrained=True)

## 操作①
### githubから「imagenet.txt」ダウンロードした後、下記にアップロード
from google.colab import files
uploaded_file = files.upload()

#画像識別後のラベルを読みこむ
with open('imagenet.txt') as f:
  labels = [line.strip() for line in f.readlines()]

## 操作②
#### 任意の画像をアップロード（任意ではありますが、githubに用意があります）

#画像の取り込み
from google.colab import files
uploaded_file = files.upload()

## 操作③
#### Image.openの("  ")内に画像のファイル名を入れる
#（例）<br>
#上記で、「**cat.jpg**」をアップロードした場合、<br> img = Image.open("**cat.jpg**")

#画像の取り込み（ファイル名を()の中に入れる)
img = Image.open("")
#画像の確認
img

#画像データの前処理
img_t = preprocess(img)
batch_t = torch.unsqueeze(img_t, 0)
#Resnetを推論モードにセットして実行
resnet.eval()

## 結果の出力
#ResNetで画像を処理して、結果を出力
out = resnet(batch_t)
_, index = torch.max(out, 1)
percentage = torch.nn.functional.softmax(out, dim=1)[0] * 100
labels[index[0]], percentage[index[0]].item()

#他のものと推定される割合
_, indices = torch.sort(out, descending=True)
[(labels[idx], percentage[idx].item()) for idx in indices[0][:5]]
